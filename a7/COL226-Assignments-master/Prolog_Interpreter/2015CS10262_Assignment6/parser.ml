type token =
  | END
  | SEP
  | VAR of (string)
  | CONS of (string)
  | COMMA
  | O_PAREN
  | C_PAREN
  | O_SQ
  | C_SQ
  | OR
  | EOL
  | WHITESPACE
  | EOF
  | EQUAL
  | NOT_EQUAL
  | NOT

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Structure
  open Printf
# 25 "parser.ml"
let yytransl_const = [|
  257 (* END *);
  258 (* SEP *);
  261 (* COMMA *);
  262 (* O_PAREN *);
  263 (* C_PAREN *);
  264 (* O_SQ *);
  265 (* C_SQ *);
  266 (* OR *);
  267 (* EOL *);
  268 (* WHITESPACE *);
    0 (* EOF *);
  269 (* EQUAL *);
  270 (* NOT_EQUAL *);
  271 (* NOT *);
    0|]

let yytransl_block = [|
  259 (* VAR *);
  260 (* CONS *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\003\000\003\000\005\000\005\000\005\000\
\005\000\005\000\004\000\004\000\006\000\006\000\007\000\007\000\
\007\000\000\000\000\000"

let yylen = "\002\000\
\001\000\002\000\002\000\002\000\004\000\004\000\004\000\003\000\
\003\000\003\000\001\000\003\000\001\000\003\000\001\000\001\000\
\001\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\015\000\000\000\000\000\001\000\000\000\
\018\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
\000\000\000\000\002\000\004\000\000\000\000\000\000\000\003\000\
\000\000\017\000\000\000\000\000\010\000\000\000\000\000\000\000\
\009\000\012\000\007\000\000\000\006\000\005\000\014\000"

let yydgoto = "\003\000\
\009\000\013\000\010\000\014\000\026\000\027\000\012\000"

let yysindex = "\004\000\
\001\000\018\255\000\000\000\000\250\254\018\255\000\000\001\255\
\000\000\001\000\035\255\028\255\000\000\038\255\040\255\018\255\
\039\255\018\255\000\000\000\000\018\255\018\255\018\255\000\000\
\018\255\000\000\041\255\253\254\000\000\042\255\046\255\036\255\
\000\000\000\000\000\000\018\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\012\255\000\000\000\000\000\000\
\000\000\000\000\030\255\000\000\000\000\000\000\017\255\000\000\
\030\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\255\000\000\030\255\000\000\033\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\042\000\000\000\000\000\007\000\002\000\017\000\249\255"

let yytablesize = 272
let yytable = "\016\000\
\007\000\036\000\011\000\015\000\001\000\002\000\018\000\017\000\
\028\000\022\000\023\000\011\000\016\000\016\000\032\000\033\000\
\016\000\011\000\016\000\030\000\004\000\005\000\015\000\006\000\
\016\000\016\000\015\000\031\000\028\000\017\000\017\000\034\000\
\008\000\008\000\008\000\020\000\021\000\008\000\024\000\008\000\
\022\000\023\000\017\000\017\000\025\000\029\000\038\000\035\000\
\037\000\023\000\013\000\019\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\005\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000"

let yycheck = "\006\001\
\000\000\005\001\001\000\002\000\001\000\002\000\006\001\006\000\
\016\000\013\001\014\001\010\000\001\001\002\001\022\000\023\000\
\005\001\001\001\007\001\018\000\003\001\004\001\021\000\006\001\
\013\001\014\001\025\000\021\000\036\000\013\001\014\001\025\000\
\015\001\001\001\002\001\001\001\002\001\005\001\001\001\007\001\
\013\001\014\001\013\001\014\001\005\001\007\001\001\001\007\001\
\007\001\014\001\007\001\010\000\036\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\015\001"

let yynames_const = "\
  END\000\
  SEP\000\
  COMMA\000\
  O_PAREN\000\
  C_PAREN\000\
  O_SQ\000\
  C_SQ\000\
  OR\000\
  EOL\000\
  WHITESPACE\000\
  EOF\000\
  EQUAL\000\
  NOT_EQUAL\000\
  NOT\000\
  "

let yynames_block = "\
  VAR\000\
  CONS\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 31 "parser.mly"
                           ( [] )
# 186 "parser.ml"
               : Structure.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Structure.program) in
    Obj.repr(
# 32 "parser.mly"
                           ( (_1)::(_2) )
# 194 "parser.ml"
               : Structure.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atom_list) in
    Obj.repr(
# 36 "parser.mly"
                           ( _1 )
# 201 "parser.ml"
               : Structure.goal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    Obj.repr(
# 39 "parser.mly"
                           ( Fact(Head(_1)) )
# 208 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atom_list) in
    Obj.repr(
# 40 "parser.mly"
                               ( Rule(Head(_1),Body(_3)) )
# 216 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    Obj.repr(
# 44 "parser.mly"
                                           ( Atom(Sym("$not"),[Node(_3)]) )
# 223 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term_list) in
    Obj.repr(
# 45 "parser.mly"
                                           ( Atom(Sym(_1),_3) )
# 231 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 46 "parser.mly"
                                           ( Atom(Sym("$eq"),[_1;_3]) )
# 239 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 47 "parser.mly"
                                           ( Atom(Sym("$neq"),[_1;_3]) )
# 247 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'atom) in
    Obj.repr(
# 48 "parser.mly"
                                           ( _2 )
# 254 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 52 "parser.mly"
                           ( [_1] )
# 261 "parser.ml"
               : 'atom_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atom_list) in
    Obj.repr(
# 53 "parser.mly"
                           ( (_1)::(_3) )
# 269 "parser.ml"
               : 'atom_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 57 "parser.mly"
                           ( [_1] )
# 276 "parser.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term_list) in
    Obj.repr(
# 58 "parser.mly"
                           ( (_1)::(_3) )
# 284 "parser.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                           ( Var(_1) )
# 291 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                           ( Cons(_1) )
# 298 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 64 "parser.mly"
                           ( Node(_1) )
# 305 "parser.ml"
               : 'term))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry goal *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Structure.program)
let goal (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Structure.goal)
